/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LMSRMarketMakerFactoryInterface extends utils.Interface {
  functions: {
    "implementationMaster()": FunctionFragment;
    "cloneConstructor(bytes)": FunctionFragment;
    "createLMSRMarketMaker(address,address,bytes32[],uint64,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "implementationMaster"
      | "cloneConstructor"
      | "createLMSRMarketMaker"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "implementationMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cloneConstructor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLMSRMarketMaker",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "implementationMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cloneConstructor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLMSRMarketMaker",
    data: BytesLike
  ): Result;

  events: {
    "LMSRMarketMakerCreation(address,address,address,address,bytes32[],uint64,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "AMMCreated(uint256)": EventFragment;
    "CloneCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LMSRMarketMakerCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloneCreated"): EventFragment;
}

export interface LMSRMarketMakerCreationEventObject {
  creator: string;
  lmsrMarketMaker: string;
  pmSystem: string;
  collateralToken: string;
  conditionIds: string[];
  fee: BigNumber;
  funding: BigNumber;
}
export type LMSRMarketMakerCreationEvent = TypedEvent<
  [string, string, string, string, string[], BigNumber, BigNumber],
  LMSRMarketMakerCreationEventObject
>;

export type LMSRMarketMakerCreationEventFilter =
  TypedEventFilter<LMSRMarketMakerCreationEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AMMCreatedEventObject {
  initialFunding: BigNumber;
}
export type AMMCreatedEvent = TypedEvent<[BigNumber], AMMCreatedEventObject>;

export type AMMCreatedEventFilter = TypedEventFilter<AMMCreatedEvent>;

export interface CloneCreatedEventObject {
  target: string;
  clone: string;
}
export type CloneCreatedEvent = TypedEvent<
  [string, string],
  CloneCreatedEventObject
>;

export type CloneCreatedEventFilter = TypedEventFilter<CloneCreatedEvent>;

export interface LMSRMarketMakerFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LMSRMarketMakerFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    implementationMaster(overrides?: CallOverrides): Promise<[string]>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLMSRMarketMaker(
      pmSystem: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>,
      funding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  implementationMaster(overrides?: CallOverrides): Promise<string>;

  cloneConstructor(
    consData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLMSRMarketMaker(
    pmSystem: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    conditionIds: PromiseOrValue<BytesLike>[],
    fee: PromiseOrValue<BigNumberish>,
    whitelist: PromiseOrValue<string>,
    funding: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    implementationMaster(overrides?: CallOverrides): Promise<string>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLMSRMarketMaker(
      pmSystem: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>,
      funding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LMSRMarketMakerCreation(address,address,address,address,bytes32[],uint64,uint256)"(
      creator?: PromiseOrValue<string> | null,
      lmsrMarketMaker?: null,
      pmSystem?: null,
      collateralToken?: null,
      conditionIds?: null,
      fee?: null,
      funding?: null
    ): LMSRMarketMakerCreationEventFilter;
    LMSRMarketMakerCreation(
      creator?: PromiseOrValue<string> | null,
      lmsrMarketMaker?: null,
      pmSystem?: null,
      collateralToken?: null,
      conditionIds?: null,
      fee?: null,
      funding?: null
    ): LMSRMarketMakerCreationEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "AMMCreated(uint256)"(initialFunding?: null): AMMCreatedEventFilter;
    AMMCreated(initialFunding?: null): AMMCreatedEventFilter;

    "CloneCreated(address,address)"(
      target?: PromiseOrValue<string> | null,
      clone?: null
    ): CloneCreatedEventFilter;
    CloneCreated(
      target?: PromiseOrValue<string> | null,
      clone?: null
    ): CloneCreatedEventFilter;
  };

  estimateGas: {
    implementationMaster(overrides?: CallOverrides): Promise<BigNumber>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLMSRMarketMaker(
      pmSystem: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>,
      funding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    implementationMaster(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLMSRMarketMaker(
      pmSystem: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>,
      funding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
