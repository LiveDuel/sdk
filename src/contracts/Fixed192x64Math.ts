/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface Fixed192x64MathInterface extends utils.Interface {
  functions: {
    "LN2()": FunctionFragment;
    "binaryLog(uint256,Fixed192x64Math.EstimationMode)": FunctionFragment;
    "log2Bounds(uint256)": FunctionFragment;
    "pow2(int256,Fixed192x64Math.EstimationMode)": FunctionFragment;
    "LOG2_E()": FunctionFragment;
    "ln(uint256)": FunctionFragment;
    "floorLog2(uint256)": FunctionFragment;
    "pow2Bounds(int256)": FunctionFragment;
    "ONE()": FunctionFragment;
    "max(int256[])": FunctionFragment;
    "exp(int256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LN2"
      | "binaryLog"
      | "log2Bounds"
      | "pow2"
      | "LOG2_E"
      | "ln"
      | "floorLog2"
      | "pow2Bounds"
      | "ONE"
      | "max"
      | "exp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LN2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "binaryLog",
    values: [PromiseOrValue<BigNumberish>, any]
  ): string;
  encodeFunctionData(
    functionFragment: "log2Bounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pow2",
    values: [PromiseOrValue<BigNumberish>, any]
  ): string;
  encodeFunctionData(functionFragment: "LOG2_E", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ln",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "floorLog2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pow2Bounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "max",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "LN2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "binaryLog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log2Bounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOG2_E", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ln", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floorLog2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow2Bounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exp", data: BytesLike): Result;

  events: {};
}

export interface Fixed192x64Math extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Fixed192x64MathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LN2(overrides?: CallOverrides): Promise<[BigNumber]>;

    binaryLog(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    log2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { lower: BigNumber; upper: BigNumber }>;

    pow2(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LOG2_E(overrides?: CallOverrides): Promise<[BigNumber]>;

    ln(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    floorLog2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lo: BigNumber }>;

    pow2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { lower: BigNumber; upper: BigNumber }>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    max(
      nums: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxNum: BigNumber }>;

    exp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  LN2(overrides?: CallOverrides): Promise<BigNumber>;

  binaryLog(
    x: PromiseOrValue<BigNumberish>,
    estimationMode: any,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  log2Bounds(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { lower: BigNumber; upper: BigNumber }>;

  pow2(
    x: PromiseOrValue<BigNumberish>,
    estimationMode: any,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LOG2_E(overrides?: CallOverrides): Promise<BigNumber>;

  ln(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  floorLog2(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pow2Bounds(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { lower: BigNumber; upper: BigNumber }>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  max(
    nums: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exp(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    LN2(overrides?: CallOverrides): Promise<BigNumber>;

    binaryLog(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { lower: BigNumber; upper: BigNumber }>;

    pow2(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LOG2_E(overrides?: CallOverrides): Promise<BigNumber>;

    ln(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floorLog2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { lower: BigNumber; upper: BigNumber }>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    max(
      nums: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    LN2(overrides?: CallOverrides): Promise<BigNumber>;

    binaryLog(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow2(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LOG2_E(overrides?: CallOverrides): Promise<BigNumber>;

    ln(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floorLog2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    max(
      nums: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LN2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    binaryLog(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pow2(
      x: PromiseOrValue<BigNumberish>,
      estimationMode: any,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LOG2_E(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ln(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floorLog2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pow2Bounds(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    max(
      nums: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
