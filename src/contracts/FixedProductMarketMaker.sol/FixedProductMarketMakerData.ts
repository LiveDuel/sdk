/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FixedProductMarketMakerDataInterface extends utils.Interface {
  functions: {};

  events: {
    "FPMMFundingAdded(address,uint256[],uint256)": EventFragment;
    "FPMMFundingRemoved(address,uint256[],uint256,uint256)": EventFragment;
    "FPMMBuy(address,uint256,uint256,uint256,uint256)": EventFragment;
    "FPMMSell(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FPMMFundingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMFundingRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMSell"): EventFragment;
}

export interface FPMMFundingAddedEventObject {
  funder: string;
  amountsAdded: BigNumber[];
  sharesMinted: BigNumber;
}
export type FPMMFundingAddedEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  FPMMFundingAddedEventObject
>;

export type FPMMFundingAddedEventFilter =
  TypedEventFilter<FPMMFundingAddedEvent>;

export interface FPMMFundingRemovedEventObject {
  funder: string;
  amountsRemoved: BigNumber[];
  collateralRemovedFromFeePool: BigNumber;
  sharesBurnt: BigNumber;
}
export type FPMMFundingRemovedEvent = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber],
  FPMMFundingRemovedEventObject
>;

export type FPMMFundingRemovedEventFilter =
  TypedEventFilter<FPMMFundingRemovedEvent>;

export interface FPMMBuyEventObject {
  buyer: string;
  investmentAmount: BigNumber;
  feeAmount: BigNumber;
  outcomeIndex: BigNumber;
  outcomeTokensBought: BigNumber;
}
export type FPMMBuyEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  FPMMBuyEventObject
>;

export type FPMMBuyEventFilter = TypedEventFilter<FPMMBuyEvent>;

export interface FPMMSellEventObject {
  seller: string;
  returnAmount: BigNumber;
  feeAmount: BigNumber;
  outcomeIndex: BigNumber;
  outcomeTokensSold: BigNumber;
}
export type FPMMSellEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  FPMMSellEventObject
>;

export type FPMMSellEventFilter = TypedEventFilter<FPMMSellEvent>;

export interface FixedProductMarketMakerData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedProductMarketMakerDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "FPMMFundingAdded(address,uint256[],uint256)"(
      funder?: PromiseOrValue<string> | null,
      amountsAdded?: null,
      sharesMinted?: null
    ): FPMMFundingAddedEventFilter;
    FPMMFundingAdded(
      funder?: PromiseOrValue<string> | null,
      amountsAdded?: null,
      sharesMinted?: null
    ): FPMMFundingAddedEventFilter;

    "FPMMFundingRemoved(address,uint256[],uint256,uint256)"(
      funder?: PromiseOrValue<string> | null,
      amountsRemoved?: null,
      collateralRemovedFromFeePool?: null,
      sharesBurnt?: null
    ): FPMMFundingRemovedEventFilter;
    FPMMFundingRemoved(
      funder?: PromiseOrValue<string> | null,
      amountsRemoved?: null,
      collateralRemovedFromFeePool?: null,
      sharesBurnt?: null
    ): FPMMFundingRemovedEventFilter;

    "FPMMBuy(address,uint256,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensBought?: null
    ): FPMMBuyEventFilter;
    FPMMBuy(
      buyer?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensBought?: null
    ): FPMMBuyEventFilter;

    "FPMMSell(address,uint256,uint256,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      returnAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensSold?: null
    ): FPMMSellEventFilter;
    FPMMSell(
      seller?: PromiseOrValue<string> | null,
      returnAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensSold?: null
    ): FPMMSellEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
