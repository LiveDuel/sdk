/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MarketMakerInterface extends utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "resume()": FunctionFragment;
    "pmSystem()": FunctionFragment;
    "trade(int256[],int256)": FunctionFragment;
    "close()": FunctionFragment;
    "withdrawFees()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "calcNetCost(int256[])": FunctionFragment;
    "pause()": FunctionFragment;
    "changeFunding(int256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "whitelist()": FunctionFragment;
    "calcMarketFee(uint256)": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "stage()": FunctionFragment;
    "funding()": FunctionFragment;
    "conditionIds(uint256)": FunctionFragment;
    "atomicOutcomeSlotCount()": FunctionFragment;
    "fee()": FunctionFragment;
    "changeFee(uint64)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "FEE_RANGE()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "supportsInterface"
      | "resume"
      | "pmSystem"
      | "trade"
      | "close"
      | "withdrawFees"
      | "renounceOwnership"
      | "calcNetCost"
      | "pause"
      | "changeFunding"
      | "owner"
      | "isOwner"
      | "whitelist"
      | "calcMarketFee"
      | "collateralToken"
      | "onERC1155BatchReceived"
      | "stage"
      | "funding"
      | "conditionIds"
      | "atomicOutcomeSlotCount"
      | "fee"
      | "changeFee"
      | "onERC1155Received"
      | "transferOwnership"
      | "FEE_RANGE"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(functionFragment: "pmSystem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcNetCost",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeFunding",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcMarketFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "stage", values?: undefined): string;
  encodeFunctionData(functionFragment: "funding", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "conditionIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicOutcomeSlotCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "FEE_RANGE", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmSystem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcNetCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conditionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "atomicOutcomeSlotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_RANGE", data: BytesLike): Result;

  events: {
    "AMMCreated(uint256)": EventFragment;
    "AMMPaused()": EventFragment;
    "AMMResumed()": EventFragment;
    "AMMClosed()": EventFragment;
    "AMMFundingChanged(int256)": EventFragment;
    "AMMFeeChanged(uint64)": EventFragment;
    "AMMFeeWithdrawal(uint256)": EventFragment;
    "AMMOutcomeTokenTrade(address,int256[],int256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AMMCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMFundingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMFeeWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AMMOutcomeTokenTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AMMCreatedEventObject {
  initialFunding: BigNumber;
}
export type AMMCreatedEvent = TypedEvent<[BigNumber], AMMCreatedEventObject>;

export type AMMCreatedEventFilter = TypedEventFilter<AMMCreatedEvent>;

export interface AMMPausedEventObject {}
export type AMMPausedEvent = TypedEvent<[], AMMPausedEventObject>;

export type AMMPausedEventFilter = TypedEventFilter<AMMPausedEvent>;

export interface AMMResumedEventObject {}
export type AMMResumedEvent = TypedEvent<[], AMMResumedEventObject>;

export type AMMResumedEventFilter = TypedEventFilter<AMMResumedEvent>;

export interface AMMClosedEventObject {}
export type AMMClosedEvent = TypedEvent<[], AMMClosedEventObject>;

export type AMMClosedEventFilter = TypedEventFilter<AMMClosedEvent>;

export interface AMMFundingChangedEventObject {
  fundingChange: BigNumber;
}
export type AMMFundingChangedEvent = TypedEvent<
  [BigNumber],
  AMMFundingChangedEventObject
>;

export type AMMFundingChangedEventFilter =
  TypedEventFilter<AMMFundingChangedEvent>;

export interface AMMFeeChangedEventObject {
  newFee: BigNumber;
}
export type AMMFeeChangedEvent = TypedEvent<
  [BigNumber],
  AMMFeeChangedEventObject
>;

export type AMMFeeChangedEventFilter = TypedEventFilter<AMMFeeChangedEvent>;

export interface AMMFeeWithdrawalEventObject {
  fees: BigNumber;
}
export type AMMFeeWithdrawalEvent = TypedEvent<
  [BigNumber],
  AMMFeeWithdrawalEventObject
>;

export type AMMFeeWithdrawalEventFilter =
  TypedEventFilter<AMMFeeWithdrawalEvent>;

export interface AMMOutcomeTokenTradeEventObject {
  transactor: string;
  outcomeTokenAmounts: BigNumber[];
  outcomeTokenNetCost: BigNumber;
  marketFees: BigNumber;
}
export type AMMOutcomeTokenTradeEvent = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber],
  AMMOutcomeTokenTradeEventObject
>;

export type AMMOutcomeTokenTradeEventFilter =
  TypedEventFilter<AMMOutcomeTokenTradeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MarketMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pmSystem(overrides?: CallOverrides): Promise<[string]>;

    trade(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      collateralLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcNetCost(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netCost: BigNumber }>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFunding(
      fundingChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;

    calcMarketFee(
      outcomeTokenCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    funding(overrides?: CallOverrides): Promise<[BigNumber]>;

    conditionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    atomicOutcomeSlotCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    FEE_RANGE(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  resume(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pmSystem(overrides?: CallOverrides): Promise<string>;

  trade(
    outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
    collateralLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  close(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcNetCost(
    outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFunding(
    fundingChange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  calcMarketFee(
    outcomeTokenCost: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    _operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stage(overrides?: CallOverrides): Promise<number>;

  funding(overrides?: CallOverrides): Promise<BigNumber>;

  conditionIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  atomicOutcomeSlotCount(overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  changeFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  FEE_RANGE(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    resume(overrides?: CallOverrides): Promise<void>;

    pmSystem(overrides?: CallOverrides): Promise<string>;

    trade(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      collateralLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(overrides?: CallOverrides): Promise<void>;

    withdrawFees(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    calcNetCost(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    changeFunding(
      fundingChange: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    whitelist(overrides?: CallOverrides): Promise<string>;

    calcMarketFee(
      outcomeTokenCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    stage(overrides?: CallOverrides): Promise<number>;

    funding(overrides?: CallOverrides): Promise<BigNumber>;

    conditionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    atomicOutcomeSlotCount(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    changeFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    FEE_RANGE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AMMCreated(uint256)"(initialFunding?: null): AMMCreatedEventFilter;
    AMMCreated(initialFunding?: null): AMMCreatedEventFilter;

    "AMMPaused()"(): AMMPausedEventFilter;
    AMMPaused(): AMMPausedEventFilter;

    "AMMResumed()"(): AMMResumedEventFilter;
    AMMResumed(): AMMResumedEventFilter;

    "AMMClosed()"(): AMMClosedEventFilter;
    AMMClosed(): AMMClosedEventFilter;

    "AMMFundingChanged(int256)"(
      fundingChange?: null
    ): AMMFundingChangedEventFilter;
    AMMFundingChanged(fundingChange?: null): AMMFundingChangedEventFilter;

    "AMMFeeChanged(uint64)"(newFee?: null): AMMFeeChangedEventFilter;
    AMMFeeChanged(newFee?: null): AMMFeeChangedEventFilter;

    "AMMFeeWithdrawal(uint256)"(fees?: null): AMMFeeWithdrawalEventFilter;
    AMMFeeWithdrawal(fees?: null): AMMFeeWithdrawalEventFilter;

    "AMMOutcomeTokenTrade(address,int256[],int256,uint256)"(
      transactor?: PromiseOrValue<string> | null,
      outcomeTokenAmounts?: null,
      outcomeTokenNetCost?: null,
      marketFees?: null
    ): AMMOutcomeTokenTradeEventFilter;
    AMMOutcomeTokenTrade(
      transactor?: PromiseOrValue<string> | null,
      outcomeTokenAmounts?: null,
      outcomeTokenNetCost?: null,
      marketFees?: null
    ): AMMOutcomeTokenTradeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pmSystem(overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      collateralLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcNetCost(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFunding(
      fundingChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    calcMarketFee(
      outcomeTokenCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    funding(overrides?: CallOverrides): Promise<BigNumber>;

    conditionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    atomicOutcomeSlotCount(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    changeFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    FEE_RANGE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pmSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trade(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      collateralLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcNetCost(
      outcomeTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFunding(
      fundingChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcMarketFee(
      outcomeTokenCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    funding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conditionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atomicOutcomeSlotCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    FEE_RANGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
