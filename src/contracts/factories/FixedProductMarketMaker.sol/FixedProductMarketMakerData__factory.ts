/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FixedProductMarketMakerData,
  FixedProductMarketMakerDataInterface,
} from "../../FixedProductMarketMaker.sol/FixedProductMarketMakerData";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "funder",
        type: "address",
      },
      {
        indexed: false,
        name: "amountsAdded",
        type: "uint256[]",
      },
      {
        indexed: false,
        name: "sharesMinted",
        type: "uint256",
      },
    ],
    name: "FPMMFundingAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "funder",
        type: "address",
      },
      {
        indexed: false,
        name: "amountsRemoved",
        type: "uint256[]",
      },
      {
        indexed: false,
        name: "collateralRemovedFromFeePool",
        type: "uint256",
      },
      {
        indexed: false,
        name: "sharesBurnt",
        type: "uint256",
      },
    ],
    name: "FPMMFundingRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        name: "investmentAmount",
        type: "uint256",
      },
      {
        indexed: false,
        name: "feeAmount",
        type: "uint256",
      },
      {
        indexed: true,
        name: "outcomeIndex",
        type: "uint256",
      },
      {
        indexed: false,
        name: "outcomeTokensBought",
        type: "uint256",
      },
    ],
    name: "FPMMBuy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        name: "returnAmount",
        type: "uint256",
      },
      {
        indexed: false,
        name: "feeAmount",
        type: "uint256",
      },
      {
        indexed: true,
        name: "outcomeIndex",
        type: "uint256",
      },
      {
        indexed: false,
        name: "outcomeTokensSold",
        type: "uint256",
      },
    ],
    name: "FPMMSell",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723058206910496edc33f46cbe11bbfc01f9a3371ab5640b521b27bf8d2b3f2ec2b7dee564736f6c634300050a0032";

type FixedProductMarketMakerDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedProductMarketMakerDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedProductMarketMakerData__factory extends ContractFactory {
  constructor(...args: FixedProductMarketMakerDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FixedProductMarketMakerData> {
    return super.deploy(
      overrides || {}
    ) as Promise<FixedProductMarketMakerData>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FixedProductMarketMakerData {
    return super.attach(address) as FixedProductMarketMakerData;
  }
  override connect(signer: Signer): FixedProductMarketMakerData__factory {
    return super.connect(signer) as FixedProductMarketMakerData__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedProductMarketMakerDataInterface {
    return new utils.Interface(_abi) as FixedProductMarketMakerDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedProductMarketMakerData {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FixedProductMarketMakerData;
  }
}
