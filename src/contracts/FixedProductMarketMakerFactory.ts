/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FixedProductMarketMakerFactoryInterface
  extends utils.Interface {
  functions: {
    "implementationMaster()": FunctionFragment;
    "createFixedProductMarketMaker(address,address,bytes32[],uint256)": FunctionFragment;
    "cloneConstructor(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "implementationMaster"
      | "createFixedProductMarketMaker"
      | "cloneConstructor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "implementationMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFixedProductMarketMaker",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cloneConstructor",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "implementationMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFixedProductMarketMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cloneConstructor",
    data: BytesLike
  ): Result;

  events: {
    "FixedProductMarketMakerCreation(address,address,address,address,bytes32[],uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "FPMMFundingAdded(address,uint256[],uint256)": EventFragment;
    "FPMMFundingRemoved(address,uint256[],uint256,uint256)": EventFragment;
    "FPMMBuy(address,uint256,uint256,uint256,uint256)": EventFragment;
    "FPMMSell(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CloneCreated(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "FixedProductMarketMakerCreation"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMFundingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMFundingRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FPMMSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloneCreated"): EventFragment;
}

export interface FixedProductMarketMakerCreationEventObject {
  creator: string;
  fixedProductMarketMaker: string;
  conditionalTokens: string;
  collateralToken: string;
  conditionIds: string[];
  fee: BigNumber;
}
export type FixedProductMarketMakerCreationEvent = TypedEvent<
  [string, string, string, string, string[], BigNumber],
  FixedProductMarketMakerCreationEventObject
>;

export type FixedProductMarketMakerCreationEventFilter =
  TypedEventFilter<FixedProductMarketMakerCreationEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FPMMFundingAddedEventObject {
  funder: string;
  amountsAdded: BigNumber[];
  sharesMinted: BigNumber;
}
export type FPMMFundingAddedEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  FPMMFundingAddedEventObject
>;

export type FPMMFundingAddedEventFilter =
  TypedEventFilter<FPMMFundingAddedEvent>;

export interface FPMMFundingRemovedEventObject {
  funder: string;
  amountsRemoved: BigNumber[];
  collateralRemovedFromFeePool: BigNumber;
  sharesBurnt: BigNumber;
}
export type FPMMFundingRemovedEvent = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber],
  FPMMFundingRemovedEventObject
>;

export type FPMMFundingRemovedEventFilter =
  TypedEventFilter<FPMMFundingRemovedEvent>;

export interface FPMMBuyEventObject {
  buyer: string;
  investmentAmount: BigNumber;
  feeAmount: BigNumber;
  outcomeIndex: BigNumber;
  outcomeTokensBought: BigNumber;
}
export type FPMMBuyEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  FPMMBuyEventObject
>;

export type FPMMBuyEventFilter = TypedEventFilter<FPMMBuyEvent>;

export interface FPMMSellEventObject {
  seller: string;
  returnAmount: BigNumber;
  feeAmount: BigNumber;
  outcomeIndex: BigNumber;
  outcomeTokensSold: BigNumber;
}
export type FPMMSellEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  FPMMSellEventObject
>;

export type FPMMSellEventFilter = TypedEventFilter<FPMMSellEvent>;

export interface CloneCreatedEventObject {
  target: string;
  clone: string;
}
export type CloneCreatedEvent = TypedEvent<
  [string, string],
  CloneCreatedEventObject
>;

export type CloneCreatedEventFilter = TypedEventFilter<CloneCreatedEvent>;

export interface FixedProductMarketMakerFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedProductMarketMakerFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    implementationMaster(overrides?: CallOverrides): Promise<[string]>;

    createFixedProductMarketMaker(
      conditionalTokens: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  implementationMaster(overrides?: CallOverrides): Promise<string>;

  createFixedProductMarketMaker(
    conditionalTokens: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    conditionIds: PromiseOrValue<BytesLike>[],
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cloneConstructor(
    consData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    implementationMaster(overrides?: CallOverrides): Promise<string>;

    createFixedProductMarketMaker(
      conditionalTokens: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FixedProductMarketMakerCreation(address,address,address,address,bytes32[],uint256)"(
      creator?: PromiseOrValue<string> | null,
      fixedProductMarketMaker?: null,
      conditionalTokens?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      conditionIds?: null,
      fee?: null
    ): FixedProductMarketMakerCreationEventFilter;
    FixedProductMarketMakerCreation(
      creator?: PromiseOrValue<string> | null,
      fixedProductMarketMaker?: null,
      conditionalTokens?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      conditionIds?: null,
      fee?: null
    ): FixedProductMarketMakerCreationEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "FPMMFundingAdded(address,uint256[],uint256)"(
      funder?: PromiseOrValue<string> | null,
      amountsAdded?: null,
      sharesMinted?: null
    ): FPMMFundingAddedEventFilter;
    FPMMFundingAdded(
      funder?: PromiseOrValue<string> | null,
      amountsAdded?: null,
      sharesMinted?: null
    ): FPMMFundingAddedEventFilter;

    "FPMMFundingRemoved(address,uint256[],uint256,uint256)"(
      funder?: PromiseOrValue<string> | null,
      amountsRemoved?: null,
      collateralRemovedFromFeePool?: null,
      sharesBurnt?: null
    ): FPMMFundingRemovedEventFilter;
    FPMMFundingRemoved(
      funder?: PromiseOrValue<string> | null,
      amountsRemoved?: null,
      collateralRemovedFromFeePool?: null,
      sharesBurnt?: null
    ): FPMMFundingRemovedEventFilter;

    "FPMMBuy(address,uint256,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensBought?: null
    ): FPMMBuyEventFilter;
    FPMMBuy(
      buyer?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensBought?: null
    ): FPMMBuyEventFilter;

    "FPMMSell(address,uint256,uint256,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      returnAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensSold?: null
    ): FPMMSellEventFilter;
    FPMMSell(
      seller?: PromiseOrValue<string> | null,
      returnAmount?: null,
      feeAmount?: null,
      outcomeIndex?: PromiseOrValue<BigNumberish> | null,
      outcomeTokensSold?: null
    ): FPMMSellEventFilter;

    "CloneCreated(address,address)"(
      target?: PromiseOrValue<string> | null,
      clone?: null
    ): CloneCreatedEventFilter;
    CloneCreated(
      target?: PromiseOrValue<string> | null,
      clone?: null
    ): CloneCreatedEventFilter;
  };

  estimateGas: {
    implementationMaster(overrides?: CallOverrides): Promise<BigNumber>;

    createFixedProductMarketMaker(
      conditionalTokens: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    implementationMaster(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createFixedProductMarketMaker(
      conditionalTokens: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      conditionIds: PromiseOrValue<BytesLike>[],
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cloneConstructor(
      consData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
